#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <pthread.h>
 
#define MAX 1024
#define SIZE 5

char items[SIZE];
int front = -1, rear = -1, strLen;
char *str;
pthread_mutex_t lock;
pthread_cond_t cond;

FILE *fp;

int readf(FILE *fp){
	if((fp=fopen("message.txt", "r"))==NULL){
		printf("ERROR: can't open message.txt!\n");
		return 0;
	}
	str=(char *)malloc(sizeof(char)*MAX);
	if(str==NULL){
		printf("ERROR: Out of memory!\n");
		return -1;
	}
	
	/*read string from the file*/
	str=fgets(str, MAX, fp);

	strLen=strlen(str)-1;
}

//Implementation of circular queue is from www.programiz.com/dsa/circular-queue
int isFull(){
    if( (front == rear + 1) || (front == 0 && rear == SIZE-1)) return 1;
    return 0;
}

int isEmpty(){
    if(front == -1) return 1;
    return 0;
}

void enQueue(char element){
    if(isFull()) printf("\n Queue is full!! \n");
    else{
        if(front == -1) front = 0;
        rear = (rear + 1) % SIZE;
        items[rear] = element;
        //printf("\n Inserted -> %c", element);
    }
}

int deQueue(){
    char element;
    if(isEmpty()) {
        printf("\n Queue is empty !! \n");
        return(-1);
    } 
	else {
        element = items[front];
        if (front == rear){
            front = -1;
            rear = -1;
        } /* Q has only one element, so we reset the queue after dequeing it. ? */
        else {
            front = (front + 1) % SIZE;
            
        }
        //printf("\n Deleted element -> %c \n", element);
        return(element);
    }
}

void* producer(void *foo){
	pthread_mutex_lock(&lock);
	int i, j;

	for (j = 0; j<strLen; j){
		for (i = 0; i< SIZE; i++){	
			enQueue(str[j]);
			j++;			
		}
		pthread_cond_signal(&cond);
		pthread_cond_wait(&cond,&lock);
	}
	pthread_cond_signal(&cond);
	pthread_mutex_unlock(&lock);
	pthread_mutex_destroy(&lock);
	pthread_exit(NULL);		
}

void* consumer(void *foo){
	pthread_mutex_lock(&lock);
	pthread_cond_wait(&cond,&lock);
	pthread_mutex_unlock(&lock);
	
	int i, j;
	
	for (j = 0; j<strLen; j){
		for (i = 0; i< SIZE; i++){	
			printf("%c", items[i]);
			deQueue();
			j++;	
		}
		
		pthread_cond_signal(&cond);
		pthread_cond_wait(&cond,&lock);
	}
	pthread_mutex_destroy(&lock);
	pthread_exit(NULL);	
}

int main(int argc, char *argv[]){
	
	readf(fp);
	
	//creating threads
	pthread_t produce,consume;
	pthread_create(&produce, NULL, producer, NULL);
	pthread_create(&consume, NULL, consumer, NULL);
	
	pthread_join(produce, NULL);
	pthread_join(consume, NULL);
	
	pthread_exit(NULL);
	return 1;
}
